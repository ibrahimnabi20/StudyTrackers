name: CI – Build, Test, Quality & Package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. .NET SDK
      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      # 3. Install global tools
      - name: Install .NET tools
        run: |
          dotnet new tool-manifest --force
          dotnet tool install dotnet-reportgenerator-globaltool
          dotnet tool install dotnet-sonarscanner
          dotnet tool install dotnet-stryker
          dotnet tool install dotnet-ef

      # 4. SonarQube begin
      - name: SonarQube – begin analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin \
            /k:"StudyTracker" \
            /d:sonar.login="${SONAR_TOKEN}" \
            /d:sonar.host.url="http://sonarqube.setgo.dk:9000" \
            /d:sonar.cs.opencover.reportsPaths="coverage-report/Cobertura.xml"

      # 5. Restore & build
      - name: Restore & build solution
        run: |
          dotnet restore StudyTrackers.sln
          dotnet build StudyTrackers.sln \
            --configuration Release \
            --no-restore

      # 6. Unit tests + coverage
      - name: Run unit tests & collect coverage
        run: |
          dotnet test tests/UnitTests/UnitTests.csproj \
            --configuration Release \
            --no-build \
            --collect:"XPlat Code Coverage" \
            --results-directory tests/UnitTests/TestResults

      # 7. Generate Cobertura report
      - name: Generate coverage report
        run: |
          reportgenerator \
            -reports:"tests/UnitTests/TestResults/**/coverage.cobertura.xml" \
            -targetdir:"coverage-report" \
            -reporttypes:"Cobertura"

      # 8. EF Core migrations (against your dev DB)
      - name: Apply EF Core migrations
        run: |
          dotnet ef database update \
            --project backend/StudyTracker.csproj

      # 9. SonarQube end
      - name: SonarQube – end analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner end \
          /d:sonar.login="${SONAR_TOKEN}"

      # 10. Mutation testing
      - name: Mutation tests (Stryker)
        run: dotnet stryker --break-on 80

      # 11. Package output
      - name: Package backend build
        run: |
          zip -r StudyTracker_Backend_${{ github.run_number }}.zip \
            backend/bin/Release/net8.0
          mkdir artifact
          mv StudyTracker_Backend_*.zip artifact/

      # 12. Upload artifact
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: StudyTracker-backend
          path: artifact/
